#!/bin/bash

set -x -e
mkdir -p /var/vcap/sys/{log,run}/multi_nics
exec 1>> /var/vcap/sys/log/multi_nics/multi_nics.out.log
exec 2>> /var/vcap/sys/log/multi_nics/multi_nics.err.log

LOCKFILE="/var/vcap/sys/run/multi_nics/running.lock"
LOCKFD=99

# PRIVATE
_lock()             { flock -$1 $LOCKFD; }
_no_more_locking()  { _lock u; _lock xn && rm -f $LOCKFILE; }
_prepare_locking()  { eval "exec $LOCKFD>\"$LOCKFILE\""; trap _no_more_locking EXIT; }

# ON START
_prepare_locking

# PUBLIC
exlock_now()        { _lock xn; }  # obtain an exclusive lock immediately or fail
exlock()            { _lock x; }   # obtain an exclusive lock
shlock()            { _lock s; }   # obtain a shared lock
unlock()            { _lock u; }   # drop a lock

### BEGIN OF SCRIPT ###

#Lock this script or exit
exlock_now || exit 1

list_ip_forwarding() {
    ip_forwarding=$(cat /proc/sys/net/ipv4/ip_forward)
    echo "*** $(date) Current ip forwarding status: ${ip_forwarding}"
}

update_ip_forwarding() {
    list_ip_forwarding

    echo "*** $(date) Updating ip forwarding with: ${1}"
    echo ${1} > /proc/sys/net/ipv4/ip_forward

    list_ip_forwarding
}

update_arp_ignore() {
    echo "*** $(date) Updating arp ignore: ${1}"
    echo ${1} > /proc/sys/net/ipv4/conf/all/arp_ignore
}

update_arp_announce() {
    echo "*** $(date) Updating arp announce: ${1}"
    echo ${1} > /proc/sys/net/ipv4/conf/all/arp_announce
}

update_rp_filter() {
    echo "*** $(date) Updating rp filter ${1} for: ${2}"
    nic=$(ip -o addr list | grep ${2} | awk '{print $2}')
    echo ${1} > /proc/sys/net/ipv4/conf/${nic}/rp_filter
}

list_routes() {
    echo "*** $(date) Current routes:"
    ip route show table all
}

list_rules() {
    echo "*** $(date) Current rules:"
    ip rule list
}


update_routes() {

    echo "*** $(date) ${1} route: via ${3} through tab ${4}"
    set +e
    nic=$(ip -o addr list | grep ${2} | awk '{print $2}')
    ip route ${1} ${5} via ${3} dev ${nic} tab ${4}
    set -e

}

update_nic_routes() {

    echo "*** $(date) ${1} route: via ${3} through tab ${4}"
    set +e
    nic=$(ip -o addr list | grep ${3} | awk '{print $2}')
    ip route ${1} ${2} dev ${nic} tab ${4}
    set -e

}


update_rules() {
    echo "*** $(date) ${1} rules: from ${2} look up tab ${3}"
    set +e
    ip rule ${1} from ${2} tab ${3}
    set -e
}

update_rules_mark() {
    echo "*** $(date) ${1} rules firemark: ${2} to table ${3}"
    set +e
    ip rule ${1} fwmark ${2} tab ${3}
    set -e
}


snat_rules() {
  echo "*** $(date) ${1} SNAT RULES from $2 to $3"
  set +e
  iptables -t nat ${1} POSTROUTING -j SNAT --source $2 --to $3
  set -e
}

dnat_rules() {
  echo "*** $(date) ${1} DNAT from ${2}:${3} to ${4}:{5}"
  set +e
  iptables -t nat ${1} PREROUTING -p tcp -d ${2} --dport ${3} -j DNAT --to-destination ${4}:${5}
  set -e
}

mangle_dnat(){
  echo "*** $(date) ${1} SET MARK to ${4} with ${2}:${3}"
  iptables -t mangle ${1} PREROUTING -p tcp -d ${2} --dport ${3} -j MARK --set-mark ${4}
}


case $1 in

    start)

        echo "****** $(date) ${0} start"

        # Enable IP forwarding
        update_ip_forwarding 1
        update_arp_ignore 1
        update_arp_announce 2

        <% p('networking.public_multi_nics', []).each_with_index do |route, index|
          tab = index + 1
          mark = 1
        %>
        # Add route/rules to make sure the particular nic IP would route through its own ip
        # instead of the default gateway
        update_routes add "<%= route['ip'] %>" "<%= route['gateway'] %>" <%= tab %> default
        update_rules add "<%= route['ip'] %>" <%= tab %>
        <% p('networking.snats', []).each do |snat| %>
          <% if snat['toip'] == route['ip'] %>
            #Add snat rule for out bound traffic
            snat_rules '-A' "<%= snat['cidr'] %>" "<%= snat['toip'] %>"
            #Add Rule to make sure the SNAT route through correct eithernet nic
            update_rules add "<%= snat['cidr'] %>" <%= tab %>
            #Add Route to make sure the routes of the private network go through local gateway
            update_routes add "<%= snat['localgateway'] %>" "<%= snat['localgateway'] %>" <%= tab %> "<%= snat['cidr'] %>"
          <% end %>
        <% end %>
        <% p('networking.dnats', []).each do |dnat| %>
          <% if dnat['external_ip'] == route['ip'] %>
            # RP FILTER has to be set to all to enable one of the interfaces
            echo 0 > /proc/sys/net/ipv4/conf/all/rp_filter
            #Add dnat rule for inbound traffic
            dnat_rules -A "<%= dnat['external_ip'] %>" "<%= dnat['external_port'] %>" "<%= dnat['internal_ip'] %>" "<%= dnat['internal_port'] %>"
            mangle_dnat -A "<%= dnat['external_ip'] %>" "<%= dnat['external_port'] %>" "<%= mark %>"
            update_rp_filter 0 "<%= dnat['external_ip'] %>"
            update_rules_mark add "<%= mark %>" <%= tab %>
            update_nic_routes add "<%= dnat['internal_ip'] %>" "<%= dnat['internal_gateway'] %>" <%= tab %>
            <% mark = mark + 1 %>
          <% end %>
        <% end %>
        <% p('networking.lbs', []).each do |lb| %>
          <% if lb['lbip'] == route['ip'] %>
            #Add Route to the internal IP address space can route back
            update_routes add "<%= lb['localgateway'] %>" "<%= lb['localgateway'] %>" <%= tab %> "<%= lb['cidr'] %>"
          <% end %>
        <% end %>
        <% end %>

        # Create check file
        touch /var/vcap/sys/run/multi_nics/multi_nics.check
        ;;

    stop)
        echo "****** $(date) ${0} stop"

        <% p('networking.public_multi_nics', []).each_with_index do |route, index|
          tab = index + 1
          mark = 1
        %>

        # Delete route
        update_routes del "<%= route['ip'] %>" "<%= route['gateway'] %>" <%= tab %> default
        update_rules del "<%= route['ip'] %>" <%= tab %>
        <% p('networking.snats', []).each do |snat| %>
          <% if snat['toip'] == route['ip'] %>
            snat_rules '-D' "<%= snat['cidr'] %>" "<%= snat['toip'] %>"
            update_rules del "<%= snat['cidr'] %>" <%= tab %>
            update_routes del "<%= snat['localgateway'] %>" "<%= snat['localgateway'] %>" <%= tab %> "<%= snat['cidr'] %>"
          <% end %>
        <% end %>
        <% p('networking.dnats', []).each do |dnat| %>
          <% if dnat['external_ip'] == route['ip'] %>
            echo 1 > /proc/sys/net/ipv4/conf/all/rp_filter
            dnat_rules -D "<%= dnat['external_ip'] %>" "<%= dnat['external_port'] %>" "<%= dnat['internal_ip'] %>" "<%= dnat['internal_port'] %>"
            mangle_dnat -D "<%= dnat['external_ip'] %>" "<%= dnat['external_port'] %>" "<%= mark %>"
            update_rp_filter 1 "<%= dnat['external_ip'] %>"
            update_rules_mark del "<%= mark %>" <%= tab %>
            update_nic_routes del "<%= dnat['internal_ip'] %>" "<%= dnat['internal_gateway'] %>" <%= tab %>
            <%= mark = mark + 1 %>
          <% end %>
        <% end %>
        <% p('networking.lbs', []).each do |lb| %>
          <% if lb['lbip'] == route['ip'] %>
            update_routes del "<%= lb['localgateway'] %>" "<%= lb['localgateway'] %>" <%= tab %> "<%= lb['cidr'] %>"
          <% end %>
        <% end %>
        <% end %>

        # Disable IP forwarding
        update_ip_forwarding 0
        update_arp_ignore 0
        update_arp_announce 0

        # Remove check file
        rm /var/vcap/sys/run/multi_nics/multi_nics.check
        ;;

    status)
        echo "****** $(date) ${0} status"

        # List routes
        list_routes
        list_rules
        ;;

    *)
        echo "Usage: $0 {start|stop|status}"
        exit 1
        ;;

esac
exit 0
